{"version":3,"sources":["components/AddCategory.js","Helpers/getGifs.js","components/GifGriditem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setinputValue","onSubmit","e","preventDefault","trim","length","cats","type","value","onChange","target","getGifs","category","a","url","encodeURI","fetch","resp","json","data","imgGif","map","img","id","title","images","downsized_medium","console","log","GifGriditem","className","src","alt","GifGrid","loading","state","setstate","useEffect","then","imgs","useFetchGifs","GifExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"mMAGaA,EAAc,SAAC,GAAqB,IAApBC,EAAmB,EAAnBA,cAG5B,EAAoCC,mBAAS,IAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KAmBG,OAEI,sBAAMC,SAdO,SAACC,GAElBA,EAAEC,iBAGEJ,EAAWK,OAAOC,OAAS,IAE3BR,GAAc,SAAAS,GAAI,OAAOP,GAAP,mBAAsBO,OACxCN,EAAc,MAMd,SAEA,uBACIO,KAAK,OACLC,MAAST,EACTU,SAxBe,SAAEP,GAEzBF,EAAcE,EAAEQ,OAAOF,a,+BCTbG,EAAO,uCAAI,WAAOC,GAAP,uBAAAC,EAAA,6DACfC,EADe,mGACoFC,UAAUH,IAD9F,SAEFI,MAAOF,GAFL,cAEfG,EAFe,gBAGCA,EAAKC,OAHN,uBAGdC,EAHc,EAGdA,KAEDC,EAASD,EAAKE,KAAI,SAAAC,GAAQ,IAAD,EAC3B,MAAO,CACHC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QAG1Ca,QAAQC,IAAIR,GAZS,kBAadA,GAbc,4CAAJ,sDCCRS,EAAc,SAAC,GAAqB,IAAlBL,EAAiB,EAAjBA,MAAOV,EAAU,EAAVA,IAGlC,OACI,sBAAKgB,UAAU,yCAAf,UACC,qBAAKC,IAAKjB,EAAKkB,IAAKR,IACpB,4BAAIA,QCJAS,EAAU,SAAC,GAAkB,IAAhBrB,EAAe,EAAfA,SAGxB,ECJ0B,SAAEA,GAE1B,MAA0Bd,mBAAS,CAC/BqB,KAAM,GACNe,SAAS,IAFb,mBAAOC,EAAP,KAAcC,EAAd,KAkBA,OAbAC,qBAAW,WAEP1B,EAAQC,GACP0B,MAAM,SAAAC,GAEKH,EAAS,CACLjB,KAAMoB,EACNL,SAAQ,SAI1B,CAACtB,IAEIuB,EDhBsBK,CAAc5B,GAAjCa,EAAZ,EAAON,KAAae,EAApB,EAAoBA,QAElB,OACI,qCACI,oBAAIJ,UAAU,oCAAd,SAAmDlB,IAElDsB,GAAW,mBAAGJ,UAAU,mCAAb,wBAChB,qBAAKA,UAAU,YAAf,SAGYL,EAAOJ,KAAK,SAAAC,GAAG,OACb,cAAC,EAAD,eAEIA,GADEA,EAAIC,aEfnBkB,EAAe,WAExB,MAAoC3C,mBAAS,CAAC,SAA9C,mBAAO4C,EAAP,KAAmB7C,EAAnB,KAGA,OAGI,qCACA,8CACD,cAAC,EAAD,CAAaA,cAAkBA,IAC9B,uBAEA,6BAEQ6C,EAAWrB,KAAK,SAAAT,GAAQ,OAChB,cAAC,EAAD,CAEAA,SAAaA,GADRA,Y,MChB7B+B,IAASC,OACL,cAAC,EAAD,IACFC,SAASC,eAAe,W","file":"static/js/main.2b7bdaa0.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\n\nexport const AddCategory = ({setCategories}) => {\n\n\n const [inputValue, setinputValue] = useState('');\n\n const handleInputChange = ( e ) => {\n\n    setinputValue(e.target.value)\n}\n\nconst handleSubmit = (e) => {\n\n    e.preventDefault();\n   \n\n    if (inputValue.trim().length > 2){\n        \n        setCategories(cats =>  [ inputValue, ...cats]);\n        setinputValue('');\n    }\n    \n }\n    return (\n       \n        <form onSubmit={handleSubmit}>\n\n        <input \n            type=\"text\"\n            value = {inputValue}\n            onChange={ handleInputChange }\n            />\n\n        </form>\n      \n    )\n}\n\nAddCategory.propTypes = {\n    setCategories: PropTypes.func.isRequired\n}\n","\nexport const  getGifs =  async (category) => {\n    const url = `https://api.giphy.com/v1/gifs/search?api_key=PXDFv8Mj7vR63R9wkRcogBCKKimCZ8K5&limit=10&q=${ encodeURI(category)}`;\n    const resp = await fetch( url );\n    const {data} =  await resp.json();\n    \n    const imgGif = data.map(img => {\n        return {\n            id: img.id,\n            title: img.title,\n            url: img.images?.downsized_medium.url\n        }\n    })\n    console.log(imgGif);\n    return imgGif;\n}","import React from 'react'\n\nexport const GifGriditem = ( { title, url} ) => {\n\n    \n    return (\n        <div className=\"card animate__animated animate__fadeIn\">\n         <img src={url} alt={title}/>\n         <p>{title}</p>\n        </div>\n    )\n}\n","import React from 'react'\nimport { useFetchGifs } from '../hooks/useFetchGifs'\nimport { GifGriditem } from './GifGriditem';\n\nexport const GifGrid = ({ category }) => {\n\n\n  const {data:images, loading} = useFetchGifs( category );\n\n    return (\n        <>\n            <h3 className=\"animate__animated animate__fadeIn\">{category}</h3>\n\n            {loading && <p className=\"animate__animated animate__flash\">Loading...</p>}\n        <div className=\"card-grid\">\n         \n               {\n                    images.map( img => (\n                      <GifGriditem \n                      key ={img.id}\n                      {...img}\n                      />\n                      ))   \n               }\n            \n            \n            </div>\n        \n        </>\n    )\n}\n","import { useEffect, useState } from 'react'\nimport {getGifs} from '../Helpers/getGifs'\n\nexport const useFetchGifs = ( category ) => {\n  \n    const [state, setstate] = useState({\n        data: [],\n        loading: true\n    });\n\n    useEffect( ()=> {\n\n        getGifs(category)\n        .then (imgs =>{\n            \n                    setstate({\n                        data: imgs,\n                        loading:false\n                    })\n        });\n\n    },[category])\n\n    return state;\n}\n","import React, {useState} from 'react'\nimport { AddCategory } from './components/AddCategory'\nimport { GifGrid } from './components/GifGrid'\n\nexport const GifExpertApp = () => {\n\n    const [categories, setCategories] = useState(['Goku'])\n\n\n    return (\n\n\n        <>\n        <h2>GifExpertApp</h2>    \n       <AddCategory setCategories = { setCategories }/>\n        <hr/>\n\n        <ol>\n            {\n                categories.map( category =>(\n                        <GifGrid \n                        key={category}\n                        category = { category }\n                        />\n                    ))\n            }\n        </ol>\n\n        </>\n        \n    )\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { GifExpertApp } from './GifExpertApp';\nimport './index.css';\n\nReactDOM.render(\n    <GifExpertApp />,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}